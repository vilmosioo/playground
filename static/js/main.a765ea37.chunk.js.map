{"version":3,"sources":["App.tsx","reportWebVitals.ts","CameraControls.tsx","index.tsx"],"names":["App","props","mesh","React","texture","Three","load","ref","args","map","side","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","extend","OrbitControls","CameraControls","useThree","camera","domElement","gl","controls","useRef","useFrame","_state","current","update","ReactDOM","render","StrictMode","position","document","getElementById","console","log"],"mappings":"oOAiBeA,MAZf,SAAcC,GACZ,IAAMC,EAAOC,WACPC,GAAU,IAAIC,iBAAsBC,KAAK,gBAE/C,OACE,+CAAMC,IAAKL,GAAUD,GAArB,cACE,gCAAgBO,KAAM,CAAC,EAAG,IAAK,OAC/B,qCAAqBC,IAAKL,EAASM,KAAML,kBCEhCM,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,gBCLdQ,YAAO,CAAEC,oBAUF,IAAMC,EAAiB,WAAO,IAAD,EAI9BC,cAFFC,EAFgC,EAEhCA,OACMC,EAH0B,EAGhCC,GAAMD,WAEFE,EAAWxB,IAAMyB,SAEvB,OADAC,aAAS,SAAAC,GAAM,uBAAIH,EAASI,eAAb,aAAI,EAAkBC,YAC9B,+BAAezB,IAAKoB,EAAUnB,KAAM,CAACgB,EAAQC,MCbtDQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACA,eAAC,IAAD,CAAQX,OAAQ,CAAEY,SAAU,EAAE,GAAK,EAAG,IAAtC,UACE,cAAC,EAAD,IACA,iCACA,4BAAYA,SAAU,CAAC,GAAI,GAAI,MAC/B,cAAC,EAAD,CAAKA,SAAU,CAAC,EAAG,EAAG,UAGxBC,SAASC,eAAe,SAM1B3B,EAAgB4B,QAAQC,O","file":"static/js/main.a765ea37.chunk.js","sourcesContent":["import * as React from 'react'\nimport './App.css'\nimport { MeshProps } from 'react-three-fiber'\nimport * as Three from 'three'\n\nfunction App (props: MeshProps) {\n  const mesh = React.useRef<Three.Mesh>()\n  const texture = new Three.TextureLoader().load('./stars2.png')\n\n  return (\n    <mesh ref={mesh} {...props}>\n      <sphereGeometry args={[1, 100, 100]} />\n      <meshLambertMaterial map={texture} side={Three.BackSide} />\n    </mesh>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport { ReactThreeFiber, useThree, useFrame, extend } from 'react-three-fiber'\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\n\nextend({ OrbitControls })\n\ndeclare global {\n  export namespace JSX {\n    export interface IntrinsicElements {\n      orbitControls: ReactThreeFiber.Object3DNode<OrbitControls, typeof OrbitControls>\n    }\n  }\n}\n\nexport const CameraControls = () => {\n  const {\n    camera,\n    gl: { domElement }\n  } = useThree()\n  const controls = React.useRef<OrbitControls>()\n  useFrame(_state => controls.current?.update())\n  return <orbitControls ref={controls} args={[camera, domElement]} />\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport { Canvas } from 'react-three-fiber'\nimport { CameraControls } from './CameraControls'\n\nReactDOM.render(\n  <React.StrictMode>\n  <Canvas camera={{ position: [-0.1, 0, 0] }}>\n    <CameraControls />\n    <ambientLight />\n    <pointLight position={[10, 10, 10]} />\n    <App position={[0, 0, 0]} />\n  </Canvas>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log)\n"],"sourceRoot":""}